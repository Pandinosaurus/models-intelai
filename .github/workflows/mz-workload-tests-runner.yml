name: Model Zoo Pipeline Tester
on:
  workflow_dispatch:
    inputs:
      runner_label:
        required: true
        default: tf_dataset
        type: choice
        options:
        - pvc
        - ATS-M
        - tf_dataset
        - pytorch
        - emr
        - flex-gpu
        - max-gpu
        - k8-runners
        - srf_cpu
      framework:
        required: false
        description: 'Enter Framework:'
        type: choice
        options:
        - tensorflow
        - pytorch
      workload:
        required: false
        description: 'Enter Workload:'
        type: string
      phase:
        required: true
        default: inference
        type: choice
        options:
        - inference
        - training
      device:
        required: true
        default: gpu
        type: choice
        options:
        - gpu
        - cpu
      framework_version:
        required: true
        default: 2.14.0
        type: string
      framework_extension_version:
        required: true
        default: 2.14.0.1
        type: string
      torchvision_version:
        required: false
        type: string
      aikit_release:
        description: 'Target AIKit version'
        required: false
        type: string
      is_lkg_drop:
        required: false
        default: false
        type: boolean

  workflow_call:
    inputs:
      is_lkg_drop:
        required: false
        default: false
        type: boolean
      runner_label:
        required: true
        type: string
      workload:
        required: true
        type: string
      framework:
        required: true
        type: string
      framework_version:
        required: true
        type: string
      framework_extension_version:
        required: true
        type: string
      torchvision_version:
        required: false
        type: string
      aikit_release:
        description: 'Target AIKit version'
        required: true
        type: string
      phase:
        required: true
        type: string
      device:
        required: true
        type: string

env:
  IS_LKG_DROP: ${{ inputs.is_lkg_drop || false }}
  RUNNER: ${{ inputs.runner_label || 'flex-gpu' }}
  FRAMEWORK_VERSION: ${{ inputs.framework_version || '2.14.0' }}
  FRAMEWORK_EXTENSION_VERSION: ${{ inputs.framework_extension_version || '2.14.0.1' }}
  TORCHVISION_VERSION: ${{ inputs.torchvision_version || '0.16.2' }}
  AIKIT_VERSION: ${{ inputs.aikit_release || '2024.0.0' }}
  PHASE: ${{ inputs.phase || 'inference' }}
  DEVICE: ${{ inputs.device || 'gpu' }}
  WORKLOAD: ${{ inputs.workload || 'maskrcnn' }}
  FRAMEWORK: ${{ inputs.framework || 'tensorflow' }}

jobs:
  setup-test:
    runs-on: [self-hosted, Linux, "${{ inputs.runner_label }}"]
    outputs:
      recipes: ${{ steps.recipes.outputs.RECIPES }}
    steps:
    - uses: actions/checkout@v4
    - name: Get Recipes
      id: recipes
      run: |
        if [[ ("${{ inputs.framework }}" != "") && ("${{ inputs.workload }}" != "") ]]; then
          echo "RECIPES=$(find tests/cicd/${{ inputs.framework }}/${{ inputs.workload }}/${{ inputs.phase }}/${{ inputs.device}} \
           -type f -name 'tests.yaml' -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        elif [[ ("${{ inputs.framework }}" != "") && ("${{ inputs.workload }}" == "") ]]; then
          echo "RECIPES=$(find tests/cicd/${{ inputs.framework }}/${{ inputs.workload }}/${{ inputs.phase }}/${{ inputs.device}} \
           -type f -name 'tests.yaml' -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        else
          echo "RECIPES=$(find tests/cicd/ -type f -name 'tests.yaml' -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        fi
  test-workloads:
    needs: [setup-test]
    runs-on: [self-hosted, Linux, "${{ inputs.runner_label }}"]
    container:
      image: amr-registry.caas.intel.com/aiops/imz-dev-ci:py3.9
      env:
        http_proxy: ${{ secrets.HTTP_PROXY }}
        https_proxy: ${{ secrets.HTTPS_PROXY }}
        no_proxy: ${{ secrets.NO_PROXY }}
      volumes:
        - /tf_dataset/:/tf_dataset/
        - /pytorch:/pytorch/
        - /opt/intel/oneapi:/oneapi/
      options: --privileged
    strategy:
      matrix:
        recipe: ${{ fromJson(needs.setup-test.outputs.recipes) }}
        experimental: [true]
      fail-fast: false
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Checkout OneAPI Tools Repository
      if: inputs.is_lkg_drop
      uses: actions/checkout@v4
      with:
        repository: intel-innersource/frameworks.devops.oneapi.tools.component-drop-tool
        token: ${{ secrets.SYSTFQABOT_TOKEN }}
        path: oneapi_drop_tool
    - name: Install Dependencies
      run: |
        apt-get update && apt-get install numactl -y
    - name: Define framework folder
      shell: bash
      run: |
        if [[ "${{ inputs.framework }}" == "tensorflow" ]]; then
          if [[ "${{ inputs.runner_label }}" =~ ^(flex-gpu|max-gpu|ATS-M|pvc|emr|srf_cpu|tf_dataset)$ ]]; then
            echo "FOLDER=tensorflow" >> "$GITHUB_ENV"
          fi
        elif [[ "${{ inputs.framework }}" == "pytorch" ]]; then
          if [[ "${{ inputs.runner_label }}" =~ ^(flex-gpu|max-gpu|ATS-M|pvc|emr|srf_cpu|pytorch)$ ]]; then
            echo "FOLDER=pytorch" >> "$GITHUB_ENV"
          fi
        fi
    - name: Check runner AVX capability
      run: |
        is_avx=false
        echo "Checking for avx512 availability"
        cpuid | grep -q "AVX512" && is_avx=true
        echo "IS_AVX=$is_avx" >> "$GITHUB_ENV"
    - if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: workload-results
        path: tests/cicd/output/*
    - name: Check performance
      if: github.event_name != 'workflow_dispatch' || contains(github.event.workflow, 'cicd-pipeline.yml')
      uses: ./.github/actions/check-performance
      with:
        output_folder: ${GITHUB_WORKSPACE}/tests/cicd/${{ inputs.framework }}/${{ inputs.workload }}/${{ inputs.phase }}/${{ inputs.device }}/output
        workload: ${{ inputs.workload }}
        framework: ${{ inputs.framework }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout Model Zoo Repo
      uses: actions/checkout@v4
      with:
        path: 'AIRM'
    - name: Test Container Group
      uses: intel-innersource/frameworks.ai.infrastructure.machine-learning-operations/test-runner@develop
      with:
        mlops_repo: intel-innersource/frameworks.ai.infrastructure.machine-learning-operations
        #registry: amr-registry.caas.intel.com
        test_dir: ${{ matrix.recipe }}
        token: ${{ secrets.SYSTFQABOT_TOKEN }}
