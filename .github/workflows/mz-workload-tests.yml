name: Model Zoo Workload Tests
on:
  workflow_dispatch:
    inputs:
      runner_label:
        required: true
        default: tf_dataset
        type: choice
        options:
        - pvc
        - atsm
        - tf_dataset
        - pytorch
        - emr
      workload:
        required: true
        default: resnet50v1.5-inference
        type: string
      framework:
        required: true
        default: tensorflow
        type: choice
        options:
        - tensorflow
        - pytorch
      framework_version:
        required: true
        default: 2.12.0
        type: string
      script:
        required: true
        default: inference_throughput_multi_instance.sh
        type: string
      precisions:
        required: true
        default: "['int8','fp32','bfloat16','bfloat32']"
        type: string
      dataset:
        required: false
        type: string
      aikit_release:
        description: 'Target AIKit version'
        required: false
        type: string
      is_lkg_drop:
        required: false
        default: false
        type: boolean

  workflow_call:
    inputs:
      runner_label:
        required: true
        type: string
      workload:
        required: true
        type: string
      framework:
        required: true
        type: string
      framework_version:
        required: true
        type: string
      script:
        required: true
        type: string
      is_lkg_drop:
        required: false
        default: false
        type: boolean
      aikit_release:
        description: 'Target AIKit version'
        required: true
        type: string
      precisions:
        required: true
        type: string
      dataset:
        required: false
        type: string
      benchmark:
        required: false
        type: string
      thresholds:
        required: false
        type: string
      tolerance:
        required: false
        type: string

jobs:
  test:
    runs-on: [self-hosted, Linux, "${{ inputs.runner_label }}"]
    container:
      image: amr-registry.caas.intel.com/aiops/imz-dev-ci:py3.8
      env:
        http_proxy: ${{ secrets.HTTP_PROXY }}
        https_proxy: ${{ secrets.HTTPS_PROXY }}
        no_proxy: ${{ secrets.NO_PROXY }}
      volumes:
        - /tf_dataset/:/tf_dataset/
        - /pytorch:/pytorch/
      options: --privileged
    steps:
    - name: Generate Project Number
      shell: bash
      run: echo "project-number=$(shuf -i 0-10000 -n1)" >> $GITHUB_ENV
    - name: Checkout
      uses: actions/checkout@v4
    - name: Checkout OneAPI Tools Repository
      if: inputs.is_lkg_drop
      uses: actions/checkout@v4
      with:
        repository: intel-innersource/frameworks.devops.oneapi.tools.component-drop-tool
        token: ${{ secrets.SYSTFQABOT_TOKEN }}
        path: oneapi_drop_tool
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install bc numactl -y
    - name: Define framework folder
      shell: bash
      run: |
        if [[ "${{ inputs.framework }}" == "tensorflow" ]]; then
          if [[ "${{ inputs.runner_label }}" == "atsm" ]] || [[ "${{ inputs.runner_label }}" == "pvc" ]]; then
            echo "FOLDER=ITEX-XPU" >> "$GITHUB_ENV"
          else
            echo "FOLDER=TensorFlow" >> "$GITHUB_ENV"
          fi
        elif [[ "${{ inputs.framework }}" == "pytorch" ]]; then
          if [[ "${{ inputs.runner_label }}" == "atsm" ]] || [[ "${{ inputs.runner_label }}" == "pvc" ]]; then
            echo "FOLDER=IPEX-XPU" >> "$GITHUB_ENV"
          else
            echo "FOLDER=PyTorch" >> "$GITHUB_ENV"
          fi
        fi
    - name: Check runner AVX capability
      run: |
        is_avx=false
        echo "Checking for avx512 availability"
        cpuid | grep -q "AVX512" && is_avx=true
        echo "IS_AVX=$is_avx" >> "$GITHUB_ENV"
    - name: Run ${{ inputs.workload }} ${{ inputs.script }} test
      env:
        TF_QA_PROD: ${{ secrets.TF_QA_PROD }}
      shell: bash
      run: |
        # Run test for specified workload depending if precision exist (int8, fp16, fp32, bfloat16, bfloat32)
        ./tests/cicd/${{ env.FOLDER }}/setup.sh ${{ inputs.framework_version }} ${{ inputs.is_lkg_drop }} ${GITHUB_WORKSPACE} ${{ inputs.aikit_release }}
        IFS=',()][' read -a PRECISIONS <<< ${{ inputs.precisions }}
        for PRECISION in "${PRECISIONS[@]:1}"; do
          if [[ "${PRECISION}" != "" && "${PRECISIONS["$idx"]}" != "int8" || ("${PRECISION}" == "int8" && ${{ env.IS_AVX }} == true) ]]; then
            echo "Running ${{ inputs.script }} with precision ${PRECISION}"
            ./tests/cicd/${{ env.FOLDER }}/${{ inputs.workload }}/run_test.sh ${PRECISION} ${{ inputs.script }} ${GITHUB_WORKSPACE} ${{ inputs.is_lkg_drop }} ${{ inputs.dataset }}
          fi
        done
    - if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: workload-results-${{ env.project-number }}
        path: tests/cicd/output/*
        #- name: Check performance
        #  if: github.event_name != 'workflow_dispatch' || contains(github.event.workflow, 'cicd-pipeline.yml')
        #  uses: ./.github/actions/check-performance
        #  with:
        #    output_folder: ${GITHUB_WORKSPACE}/tests/cicd/output
        #    workload: ${{ inputs.workload }}
        #    framework: ${{ inputs.framework }}
        #    script: ${{ inputs.script }}
        #    benchmark_type: ${{ inputs.benchmark }}
        #    precisions: ${{ inputs.precisions }}
        #    thresholds: ${{ inputs.thresholds }}
        #    tolerance: ${{ inputs.tolerance }}
        #    token: ${{ secrets.GITHUB_TOKEN }}
